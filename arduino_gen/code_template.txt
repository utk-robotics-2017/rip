// Auto-generated by ArduinoGen

#include "CmdMessenger.h"
{includes}

// Attach a new CmdMessenger object to the default Serial port
CmdMessenger cmdMessenger = CmdMessenger(Serial);

const char LED = 13;

{constructors}

enum
{{
	kAcknowledge,
	kError,
	kUnknown,
	kSetLed,
	kPing,
	kPingResult,
	kPong,
{command_enums}
}};

void setup()
{{
	// Init LED pin
	pinMode(LED, OUTPUT);

	// Initialize Serial Communication
	Serial.begin(115200);

	attachCommandCallbacks();

{setup}

	// Flash led 3 times at the end of setup
	for(int i = 0; i < 3; i++)
	{{
		digitalWrite(LED, HIGH);
		delay(250);
		digitalWrite(LED, LOW);
		delay(250);
	}}
}}

void loop()
{{
	// Process incoming serial data, and perform callbacks
	cmdMessenger.feedinSerialData();

{loop}
}}

//Callbacks define on which received commands we take action
void attachCommandCallbacks()
{{
	cmdMessenger.attach(unknownCommand);
	cmdMessenger.attach(kPing, ping);
	cmdMessenger.attach(kSetLed, setLed);
{command_attaches}
}}

// Called when a received command has no attached function
void unknownCommand()
{{
	cmdMessenger.sendCmd(kError, kUnknown);
}}

// Called upon initialization of Spine to check connection
void ping()
{{
	cmdMessenger.sendBinCmd(kAcknowledge, kPing);
	cmdMessenger.sendBinCmd(kPingResult, kPong);
}}

// Callback function that sets led on or off
void setLed()
{{
	// Read led state argument, interpret string as boolean
	bool ledState = cmdMessenger.readBoolArg();
	digitalWrite(LED, ledState);
	cmdMessenger.sendBinCmd(kAcknowledge, kSetLed);
}}

{command_callbacks}

{extra}
